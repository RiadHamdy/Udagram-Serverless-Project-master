service:
  name: serverless-todo-app2

plugins:
  - serverless-webpack
  - serverless-aws-documentation
  - serverless-reqvalidator-plugin
  - serverless-iam-roles-per-function

package:
  individually: true

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
    packagerOptions:
      scripts:
        - rm -rf node_modules/aws-sdk

  documentation:
    api:
      info:
        version: v1.0.0
        title: ToDos API
        description: serverless api for ToDo application
    models:
      - name: CreateTodo
        contentType: application/json
        schema: ${file(validators/create-todo-request.json)}
      - name: UpdateTodo
        contentType: application/json
        schema: ${file(validators/update-todo-request.json)}

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}

  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    TODO_TABLE: Todos-${self:provider.stage}
    TODO_CREATED_AT_INDEX: CreatedAtIndex 
    IMAGES_BUCKET: riad-udacity-todos-${self:provider.stage}
    USER_ID_INDEX: userId
  tracing:
    lambda: true
    apiGateway: true


#  iamRoleStatements:
#    - Effect: Allow
#      Action:
#        - dynamodb:Scan
#        - dynamodb:PutItem
#        - dynamodb:DeleteItem
#        - dynamodb:UpdateItem
#        - dynamodb:Query
#      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}
#    - Effect: Allow
#      Action:
#        - s3:PutObject
#        - s3:GetObject
#      Resource: arn:aws:s3:::${self:provider.environment.IMAGES_BUCKET}/*
#    - Effect: Allow
#      Action:
#        - dynamodb:Query
#      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}/index/${self:provider.environment.USER_ID_INDEX}


functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          authorizer: Auth
          cors: true
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:Scan
          - dynamodb:Query
        Resource: 
          - !Join
            - '/'
            - - !GetAtt TodoTable.Arn
              - 'index'
              - ${self:provider.environment.TODO_CREATED_AT_INDEX}


  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          authorizer: Auth
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: create new ToDo
            description: create new ToDo
            requestModels:
              'application/json': CreateTodo
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}

  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          authorizer: Auth
          cors: true
    iamRoleStatementsInherit: true
    iamRoleStatements':
      - Effect: "Allow"
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}
      - Effect: "Allow"
        Action:
          - dynamodb:Query
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}/index/${self:provider.environment.USER_ID_INDEX}
      - Effect: "Allow"
        Action:
          - s3:GetObject
          - s3:DeleteObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_BUCKET}/*

  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          authorizer: Auth
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: update a ToDo
            description: update a ToDo
            requestModels:
              'application/json': UpdateTodo
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}/index/${self:provider.environment.USER_ID_INDEX}

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          authorizer: Auth
          cors: true
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - s3:GetObject
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_BUCKET}/*
      - Effect: "Allow"
        Action:
          - dynamodb:putItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}
      - Effect: "Allow"
        Action:
          - dynamodb:Query
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}/index/${self:provider.environment.USER_ID_INDEX}


resources:
  Resources:
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        ValidateRequestBody: true
        ValidateRequestParameters: false
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Credentials: "'true'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    TodoTable:
     Type: AWS::DynamoDB::Table
     Properties:
      AttributeDefinitions:
       - AttributeName: userId
         AttributeType: S
       - AttributeName: todoId
         AttributeType: S
       - AttributeName: createdAt
         AttributeType: S
      KeySchema:
       - AttributeName: userId
         KeyType: HASH
       - AttributeName: todoId
         KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      TableName: ${self:provider.environment.TODO_TABLE}
      LocalSecondaryIndexes:
       - IndexName: ${self:provider.environment.TODO_CREATED_AT_INDEX}
         KeySchema:
           - AttributeName: userId
             KeyType: HASH
           - AttributeName: createdAt
             KeyType: RANGE
         Projection:
            ProjectionType: ALL # What attributes will be copied to an index

    TodoBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_BUCKET}
        CorsConfiguration:
          CorsRules:
            - 
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: '2012-10-17'
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: s3:GetObject
              Resource: arn:aws:s3:::${self:provider.environment.IMAGES_BUCKET}/*
        Bucket: !Ref TodoBucket